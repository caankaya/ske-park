import { toggleInfoModal } from "../redux/reducers/header";
import { useAppDispatch, useAppSelector } from "../redux/types";

export default function InfoModal() {
  const dispatch = useAppDispatch();
  const isOpen = useAppSelector((state) => state.header.infoModal);
  return (
    <dialog
      open={isOpen}
      className="fixed inset-0 z-20 h-screen w-full bg-primary/70"
    >
      <div
        className="absolute left-1/2 top-1/2 m-auto h-[95%] w-1/2 -translate-x-1/2 -translate-y-1/2 transform overflow-y-scroll rounded-xl bg-secondary p-5 shadow-xl"
        style={{
          scrollbarWidth: "none",
        }}
      >
        <form method="dialog">
          <button
            className="absolute right-2 top-2 flex size-5 items-center justify-center rounded-full bg-primary text-xs font-bold text-secondary"
            onClick={() => {
              dispatch(toggleInfoModal(false));
            }}
          >
            ‚úï
          </button>
        </form>
        <div>
          <p className="mb-2 text-center font-bold uppercase">
            SKE-PARK : Application de Gestion de Parking üöóüÖøÔ∏è
          </p>
          <p className="mb-2 text-sm">Bonjour √† toute l'√©quipe de SKEEZI üôã‚Äç‚ôÇÔ∏è</p>
          <p className="text-sm">
            Afin de mieux vous expliquer l'application, veuillez √©teindre vos
            appareils √©lectroniques, sauf celui sur lequel vous lisez ce texte
            üôÉ
          </p>
          <p className="text-sm">
            Pendant que vous lisez ce texte, je seraiiiii... non, ce n'est pas
            le bon sc√©nario ü§î
          </p>
          <p className="text-sm">
            Si vous fermez cette modal par m√©garde, il suffit de cliquer sur le
            bouton d'information ‚ÑπÔ∏è qui bondit sans arr√™t dans le header üéØ
          </p>
          <p className="text-sm">
            Assez parl√©, passons aux choses s√©rieuses ‚ö°
          </p>
          <p className="my-2 text-sm">
            <span className="font-medium">C√¥t√© front-end :</span> j'essaies de
            vous montrer la cr√©ation de composants et sous-composants,
            utilisation d'un router, mise en page, passage de props, typage avec
            TypeScript, gestion des √©tats avec Redux et des √©tats locaux,
            gestion des diff√©rentes erreurs, requ√™tes asynchrones "GET" &
            "POST". ‚öõÔ∏èüíª
          </p>
          <p className="my-2 text-sm">
            <span className="font-medium">C√¥t√© back-end :</span> j'essaie de
            vous montrer ma ma√Ætrise en cr√©ation d'API, gestion des bases de
            donn√©es avec Prisma, et mise en place d'une logique serveur
            efficace. üì° Cr√©ation des contr√¥leurs, modules et services, gestion
            des requ√™tes vers la base √† l'aide de Prisma, et validation des
            donn√©es avec des sch√©mas (DTO) gr√¢ce √† ValidationPipe. üõ†Ô∏è De plus,
            je g√©re les erreurs globales et m'assurer de la robustesse de
            l'architecture. üö® Enfin, la gestion des migrations de base de
            donn√©es et l'orchestration des tests unitaires.
          </p>
          <p className="my-2 font-medium">Technos principales</p>
          <div className="flex gap-x-5">
            <ul className="text-sm">
              <li className="font-medium">Front-end</li>
              <li>React</li>
              <li>Redux</li>
              <li>Tailwind CSS</li>
              <li>Axios</li>
            </ul>
            <ul className="text-sm">
              <li className="font-medium">Back-end</li>
              <li>NestJS</li>
              <li>Prisma</li>
              <li>PostgreSQL</li>
            </ul>
          </div>
          <p className="my-2 font-medium">Structure de la base de donn√©es</p>
          <p className="mb-2 text-sm">
            On va trouver 3 entit√©s dans la base : <em>Vehicle</em>,{" "}
            <em>Spot</em>, <em>Ticket</em>
          </p>
          <div className="flex flex-col gap-y-5">
            <ul className="text-sm">
              <li>
                <span className="font-medium">Vehicle</span> (V√©hicule)
              </li>
              <li>
                <span className="font-medium">immatriculation</span>: C'est
                l'identifiant primaire du v√©hicule. Chaque v√©hicule a une plaque
                d'immatriculation unique qui le distingue.
              </li>
              <li>
                <span className="font-medium">type:</span> Enum√©ration qui
                d√©finit le type de v√©hicule (Car ou Motor).
              </li>
              <li>
                <span className="font-medium">tickets:</span> Relation avec le
                mod√®le Ticket (un v√©hicule peut avoir plusieurs tickets mais pas
                en m√™me temps).
              </li>
            </ul>
            <ul className="text-sm">
              <li>
                <span className="text-medium font-medium">Spot</span> (Place)
              </li>
              <li>
                <span className="text-medium font-medium">number</span>:{" "}
                Identifiant unique pour chaque place (de type entier).
              </li>
              <li>
                <span className="text-medium font-medium">state:</span> Champ
                bool√©en indiquant si la place est disponible (true) ou non
                (false).
              </li>
              <li>
                <span className="text-medium font-medium">tickets:</span>{" "}
                Relation avec le mod√®le Ticket (une place peut avoir plusieurs
                tickets mais en m√™me temps).
              </li>
            </ul>
            <ul className="text-sm">
              <li className="font-medium">Ticket</li>
              <li>
                <span className="font-medium">reference :</span> Identifiant
                unique du ticket de type String. Il repr√©sente le code ou num√©ro
                de r√©f√©rence unique pour chaque ticket.
              </li>
              <li>
                <span className="font-medium">start_time :</span> Champ de type
                DateTime (optionnel) qui enregistre le moment o√π le ticket a √©t√©
                √©mis.
              </li>
              <li>
                <span className="font-medium">spot :</span> Relation avec le
                mod√®le Spot, indiquant √† quelle place de stationnement ce ticket
                est associ√©. Ce champ est li√© √† la cl√© √©trang√®re spot_number,
                qui r√©f√©rence le num√©ro de la place (number dans Spot).
              </li>
              <li>
                <span className="font-medium">spot_number :</span> Cl√© √©trang√®re
                qui lie le ticket √† un num√©ro de place (Spot).
              </li>
              <li>
                <span className="font-medium">vehicle :</span> Relation avec le
                mod√®le Vehicle, indiquant √† quel v√©hicule ce ticket est associ√©.
                Ce champ est li√© √† la cl√© √©trang√®re id_vehicle, qui r√©f√©rence
                l'immatriculation du v√©hicule.
              </li>
              <li>
                <span className="font-medium">id_vehicle :</span> Cl√© √©trang√®re
                qui fait r√©f√©rence √† l'immatriculation du v√©hicule.
              </li>
            </ul>
            <ul className="text-sm">
              <li>
                <span className="font-medium">Enum VehicleType</span> d√©finit
                les types de v√©hicules
              </li>
              <li>
                <span className="font-medium">Car :</span> Repr√©sente les
                voitures.
              </li>
              <li>
                <span className="font-medium">Motor :</span> Repr√©sente les
                motos.
              </li>
            </ul>
          </div>
          <p className="my-2 font-medium">Relations et Cardinalit√©s</p>
          <p className="mb-2 text-sm font-medium">Vehicle et Ticket </p>
          <p className="text-sm">
            <span className="font-medium">Relation :</span> Un v√©hicule
            (Vehicle) peut avoir plusieurs tickets (Ticket).
          </p>
          <p className="text-sm">
            <span className="font-medium">Cardinalit√© : 1</span> (Vehicle) √† N
            (Ticket).{" "}
          </p>
          <p className="text-sm">
            <span className="font-medium">Cl√© √©trang√®re :</span> Le champ
            id_vehicle dans le mod√®le Ticket fait r√©f√©rence √† la cl√© primaire
            immatriculation dans le mod√®le Vehicle. En cas de suppression d'un
            v√©hicule, les tickets associ√©s sont supprim√©s automatiquement
            (onDelete: Cascade).
          </p>
          <p className="my-2 text-sm font-medium">Spot et Ticket</p>
          <p className="text-sm">
            <span className="font-medium">Relation :</span> Une place de
            stationnement (Spot) peut avoir plusieurs tickets (Ticket).
          </p>{" "}
          <p className="text-sm">
            <span className="font-medium">Cardinalit√© : 1</span> (Spot) √† N
            (Ticket).{" "}
          </p>
          <p className="text-sm">
            <span className="font-medium">Cl√© √©trang√®re :</span> Le champ
            spot_number dans le mod√®le Ticket fait r√©f√©rence √† la cl√© primaire
            number dans le mod√®le Spot.
          </p>
          <p className="my-2 text-sm font-medium">Ticket, Vehicle et Spot </p>
          <p className="text-sm">
            <span className="font-medium">Relation :</span> Chaque ticket
            (Ticket) est associ√© √† une seule place (Spot) et √† un seul v√©hicule
            (Vehicle).
          </p>
          <p className="text-sm">
            <span className="font-medium">Cardinalit√© :</span> N (Ticket) √† 1
            (Vehicle) et N (Ticket) √† 1 (Spot). Cela garantit qu'un ticket
            correspond √† une place et un v√©hicule sp√©cifique √† un moment donn√©.
          </p>
          <button
            className="m-auto block h-8 w-40 rounded-md bg-info text-sm text-secondary"
            onClick={() => {
              dispatch(toggleInfoModal(false));
            }}
          >
            Fermer la modal
          </button>
        </div>
      </div>
    </dialog>
  );
}
